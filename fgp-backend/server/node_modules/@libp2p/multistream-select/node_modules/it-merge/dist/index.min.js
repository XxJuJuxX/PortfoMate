(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.ItMerge = factory()}(typeof self !== 'undefined' ? self : this, function () {
"use strict";var ItMerge=(()=>{var d=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var N=(u,t)=>{for(var e in t)d(u,e,{get:t[e],enumerable:!0})},k=(u,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of L(t))!S.call(u,i)&&i!==e&&d(u,i,{get:()=>t[i],enumerable:!(r=z(t,i))||r.enumerable});return u};var I=u=>k(d({},"__esModule",{value:!0}),u);var j={};N(j,{default:()=>P});var f=class{constructor(t){if(!(t>0)||t-1&t)throw new Error("Max size for a FixedFIFO should be a power of two");this.buffer=new Array(t),this.mask=t-1,this.top=0,this.btm=0,this.next=null}push(t){return this.buffer[this.top]!==void 0?!1:(this.buffer[this.top]=t,this.top=this.top+1&this.mask,!0)}shift(){let t=this.buffer[this.btm];if(t!==void 0)return this.buffer[this.btm]=void 0,this.btm=this.btm+1&this.mask,t}isEmpty(){return this.buffer[this.btm]===void 0}},o=class{constructor(t={}){this.hwm=t.splitLimit??16,this.head=new f(this.hwm),this.tail=this.head,this.size=0}calculateSize(t){return t?.byteLength!=null?t.byteLength:1}push(t){if(t?.value!=null&&(this.size+=this.calculateSize(t.value)),!this.head.push(t)){let e=this.head;this.head=e.next=new f(2*this.head.buffer.length),this.head.push(t)}}shift(){let t=this.tail.shift();if(t===void 0&&this.tail.next!=null){let e=this.tail.next;this.tail.next=null,this.tail=e,t=this.tail.shift()}return t?.value!=null&&(this.size-=this.calculateSize(t.value)),t}isEmpty(){return this.head.isEmpty()}};function p(u={}){return M(e=>{let r=e.shift();if(r==null)return{done:!0};if(r.error!=null)throw r.error;return{done:r.done===!0,value:r.value}},u)}function M(u,t){t=t??{};let e=t.onEnd,r=new o,i,s,h,m=async()=>r.isEmpty()?h?{done:!0}:await new Promise((n,g)=>{s=v=>{s=null,r.push(v);try{n(u(r))}catch(E){g(E)}return i}}):u(r),c=n=>s!=null?s(n):(r.push(n),i),y=n=>(r=new o,s!=null?s({error:n}):(r.push({error:n}),i)),b=n=>{if(h)return i;if(t?.objectMode!==!0&&n?.byteLength==null)throw new Error("objectMode was not true but tried to push non-Uint8Array value");return c({done:!1,value:n})},a=n=>h?i:(h=!0,n!=null?y(n):c({done:!0})),w=()=>(r=new o,a(),{done:!0}),x=n=>(a(n),{done:!0});if(i={[Symbol.asyncIterator](){return this},next:m,return:w,throw:x,push:b,end:a,get readableLength(){return r.size}},e==null)return i;let l=i;return i={[Symbol.asyncIterator](){return this},next(){return l.next()},throw(n){return l.throw(n),e!=null&&(e(n),e=void 0),{done:!0}},return(){return l.return(),e!=null&&(e(),e=void 0),{done:!0}},push:b,end(n){return l.end(n),e!=null&&(e(n),e=void 0),i},get readableLength(){return l.readableLength}},i}function _(u){return u[Symbol.asyncIterator]!=null}function A(...u){let t=[];for(let e of u)_(e)||t.push(e);return t.length===u.length?function*(){for(let e of t)yield*e}():async function*(){let e=p({objectMode:!0});Promise.resolve().then(async()=>{try{await Promise.all(u.map(async r=>{for await(let i of r)e.push(i)})),e.end()}catch(r){e.end(r)}}),yield*e}()}var P=A;return I(j);})();
return ItMerge}));
